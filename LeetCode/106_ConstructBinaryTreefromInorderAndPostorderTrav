**题意：给出一棵树的中序遍历和后序遍历，构造出这个棵二叉树。**

<br/>
**Recursion**

```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode *&root, vector<int> &in, int ib, int ie, vector<int> &post, int pb, int pe)
    {
        if(ib > ie || pb > pe) return;
        int rt;
        for(rt = ib; rt <= ie; rt++)
        {
            if(in[rt] == post[pe]) break;
        }
        root = new TreeNode(in[rt]);
        dfs(root->left, in, ib, rt-1, post, pb, pb+(rt-ib)-1);
        dfs(root->right, in, rt+1, ie, post, pe-(ie-rt), pe-1);
    }
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
        TreeNode *root = NULL;
        if(in.size() == 0) return root;
        dfs(root, in, 0, in.size()-1, post, 0, post.size()-1);
        return root;
    }
};
```
<br/>
**类似题目：105. Construct Binary Tree from Preorder and Inorder Traversal**

**Recursion**
```
class Solution {
public:
    void dfs(TreeNode* &root, vector<int>& pre, int pb, int pe, vector<int>& in, int ib, int ie)
    {
        if(pb > pe || ib > ie) return;
        int rt;
        for(rt = ib; rt <= ie; rt++)
        {
            if(in[rt] == pre[pb]) break;
        }
        root = new TreeNode(pre[pb]);
        dfs(root->left, pre, pb+1, pb+(rt-ib), in, ib, rt-1);
        dfs(root->right, pre, pb+(rt-ib)+1, pe, in, rt+1, ie);
    }
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        TreeNode *root = NULL;
        if(pre.size() == 0) return root;
        dfs(root, pre, 0, pre.size()-1, in, 0, in.size()-1);
        return root;
    }
};
```

**之后再实现Iteration写法**